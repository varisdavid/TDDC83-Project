# GitLab uses docker in the background, so we need to specify the
# image versions. This is useful because we're freely to use
# multiple node versions to work with it. They come from the docker
# repo.
# Uses NodeJS latest

# And to cache them as well.
cache:
  paths:
    - node_modules/
    - .yarn

# We tell GitLab to install all the packages
# before running anything.
# Docker images come with yarn preinstalled

# You specify the stages. Those are the steps that GitLab will go through
# Order matters.
stages:
  - build
  - publish
  - test
  - deploy
  # - staging
  # - openMr
  # - production

build:
  image: node:latest
  stage: build
  artifacts:
    paths:
      - build
  only:
    refs: 
      - master
  before_script:
    - yarn config set cache-folder .yarn
    - npm install
  script:
    - npm run build


build-flask-image:
  stage: publish
  image: docker.io/buildah/buildah
  only:
    changes:
      - backend/*
  only:
    refs: 
      - master

  script:
    - export _BUILDAH_STARTED_IN_USERNS=''
    - export BUILDAH_ISOLATION=chroot
    - export STORAGE_DRIVER=vfs
    - export BUILDAH_FORMAT=docker
    - echo ${CI_REGISTRY_USER}
    - echo ${CI_JOB_TOKEN}
    - echo ${CI_REGISTRY_IMAGE}
    - buildah build-using-dockerfile --tag "backend" "backend"
    - buildah push --creds "${CI_REGISTRY_USER}:${CI_JOB_TOKEN}" "backend" "docker://${CI_REGISTRY_IMAGE}/backend:latest"



build-app-image:
  stage: publish
  image: docker.io/buildah/buildah
  needs: ["build"]
  dependencies:
    - build
  only:
    refs: 
      - master
  script:
    - export _BUILDAH_STARTED_IN_USERNS=''
    - export BUILDAH_ISOLATION=chroot
    - export STORAGE_DRIVER=vfs
    - export BUILDAH_FORMAT=docker
    - echo ${CI_REGISTRY_USER}
    - echo ${CI_JOB_TOKEN}
    - echo ${CI_REGISTRY_IMAGE}
    - buildah build-using-dockerfile --tag "frontend" "."
    - buildah push --creds "${CI_REGISTRY_USER}:${CI_JOB_TOKEN}" "frontend" "docker://${CI_REGISTRY_IMAGE}/frontend:latest"


deploy-app:
  environment: 'production'
  needs: ["build-app-image", "build-flask-image"]
  dependencies: []
  stage: deploy
  image: lachlanevenson/k8s-kubectl
  only:
    refs: 
      - master

  script:
    - kubectl delete pods -l app=backend
    - kubectl delete pods -l app=frontend



Test:
  stage: test
  image: trion/ng-cli-e2e
  script:
    - npm install
    - npm run start-server-and-test start-server http://localhost:3000 test

# Deploy to Staging:
#   stage: staging
#   tags:
#     - node
#   before_script:
#     # Generates to connect to the AWS unit the SSH key.
#     - mkdir -p ~/.ssh
#     - echo -e "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
#     # Sets the permission to 600 to prevent a problem with AWS
#     # that it's too unprotected.
#     - chmod 600  ~/.ssh/id_rsa
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#   script:
#     - bash ./gitlab-deploy/.gitlab-deploy.staging.sh
#   environment:
#     name: staging
#     # Exposes a button that when clicked take you to the defined URL:
#     url: http://ec2-13-59-173-91.us-east-2.compute.amazonaws.com:3001

# # Remember to have the PRIVATE_TOKEN generated. This is only needed to be done once per project and not per user.
# # Once you add it (Needs Master priviliges) as a Secret Variable, it should work.
# Open Merge Request:
#   # Got it from here: https://gitlab.com/tmaier/gitlab-auto-merge-request/blob/develop/.gitlab-ci.yml
#   image: tmaier/gitlab-auto-merge-request
#   stage: openMr
#   tags:
#     - node
#   script:
#     - bash ./gitlab-deploy/auto-merge-request.sh # The name of the script

# Deploy to Production:
#   stage: production
#   tags:
#     - node
#   before_script:
#   # Generates to connect to the AWS unit the SSH key.
#     - mkdir -p ~/.ssh
#     - echo -e "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
#     # Sets the permission to 600 to prevent a problem with AWS
#   # that it's too unprotected.
#     - chmod 600  ~/.ssh/id_rsa
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#   script:
#     - bash ./gitlab-deploy/.gitlab-deploy.prod.sh
#   environment:
#     name: production
#     # Exposes a button that when clicked take you to the defined URL:
#     url: http://ec2-13-59-173-91.us-east-2.compute.amazonaws.com:81
#   when: manual
